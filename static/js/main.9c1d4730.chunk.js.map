{"version":3,"sources":["ListMovie.js","WrappedComponent.js","App.js","serviceWorker.js","index.js"],"names":["List","props","movies","length","react_default","a","createElement","className","map","item","index","key","id","width","height","title","src","video","frameBorder","year","WrappedComponent","Component","_ref","isLoading","Object","objectWithoutProperties","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","_this2","setState","setTimeout","fetch","then","Listm","rating","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAwBeA,SAtBF,SAAAC,GAAS,IACfC,EAASD,EAATC,OACP,OAAKA,EACAA,EAAOC,OAEZC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdL,EAAOM,IAAI,SAACC,EAAKC,GAAN,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBI,IAAKF,EAAKG,IAE1DR,EAAAC,EAAAC,cAAA,UAASC,UAAU,eAAeM,MAAM,QAAQC,OAAO,QAAQC,MAAM,IAAKC,IAAMP,EAAKQ,MAAOC,YAAY,MAEhFd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVE,EAAKM,MADV,IACkBN,EAAKU,KADvB,SARIf,EAAAC,EAAAC,cAAA,6BADR,cCQLc,MAVf,SAA2BC,GAC3B,OAAO,SAAAC,GAAwC,IAArBC,EAAqBD,EAArBC,UAActB,EAAOuB,OAAAC,EAAA,EAAAD,CAAAF,EAAA,eAC/C,OAAKC,EACGnB,EAAAC,EAAAC,cAAA,OAAKM,GAAG,WAAR,KADgBR,EAAAC,EAAAC,cAACe,EAAcpB,KCCjCyB,cACJ,SAAAA,EAAYzB,GACZ,IAAA0B,EAAA,OAAAH,OAAAI,EAAA,EAAAJ,CAAAK,KAAAH,IACIC,EAAAH,OAAAM,EAAA,EAAAN,CAAAK,KAAAL,OAAAO,EAAA,EAAAP,CAAAE,GAAAM,KAAAH,KAAM5B,KACDgC,MAAO,CACVC,SAAQ,EACRhC,OAAQA,GAJdyB,mFAOmB,IAAAQ,EAAAN,KACjBA,KAAKO,SAAS,CAACF,SAAS,IAC1BG,WAAW,WACXC,MAAMH,EAAKF,MAAM/B,QAChBqC,KAAK,SAAArC,GACJiC,EAAKC,SAAS,CAAEF,SAAS,EAAOhC,OAAQiC,EAAKF,MAAM/B,YAC7C,sCAIN,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACkC,EAAD,CAAOjB,UAAWM,KAAKI,MAAMC,QAAShC,OAAS2B,KAAKI,MAAM/B,iBArB/CmB,aA0BZmB,EAAQpB,EAAiBpB,GAC3BE,EAAS,CAAC,CACZU,GAAG,EACDG,MAAO,YACPI,KAAM,KACNsB,OAAQ,EACRxB,MAAO,mKACN,CACDL,GAAG,EACHG,MAAO,uBACPI,KAAM,KACNsB,OAAQ,EACVxB,MAAO,mKAEJ,CACDL,GAAG,EACHG,MAAO,eACPI,KAAM,KACNsB,OAAQ,EACRxB,MAAO,oKAEIS,ICxCKgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,KAAK,SAAAgB,GACjCA,EAAaC","file":"static/js/main.9c1d4730.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst List = props => {\r\nconst {movies} =props;\r\nif (!movies) return null;\r\nif (!movies.length) return (<p>No movies, sorry</p>)\r\nreturn(\r\n<div className=\"movie-video\">\r\n{movies.map((item,index) => \r\n                <div className=\"movies-details\" key={item.id} >\r\n            \r\n<iframe  className=\"movie-iframe\" width=\"300px\" height=\"250px\" title=\" \"  src= {item.video} frameBorder=\"1\" />  \r\n\r\n                        <div className=\"image-name\">\r\n                            {item.title}-{item.year} </div>\r\n                 \r\n                      </div>)  }\r\n\r\n</div>\r\n\r\n)\r\n\r\n\r\n}\r\nexport default List","import React from 'react';\r\n\r\nfunction WrappedComponent (Component){\r\nreturn function Loading({ isLoading, ...props}){\r\nif (!isLoading) return (<Component {...props}/> );\r\nreturn (<div id=\"loading\"> </div>);\r\n\r\n}\r\n\r\n}\r\n\r\n\r\nexport default WrappedComponent;","import React, { Component } from 'react';\nimport './App.css';\nimport List from './ListMovie'\nimport WrappedComponent from './WrappedComponent';\n\nclass App extends Component {\n  constructor(props)\n  {\n      super(props)\n      this.state=({\n        loading:false,\n        movies: movies,\n      })\n  }\n componentDidMount() {\n    this.setState({loading: true });\n  setTimeout(() => {\n  fetch(this.state.movies)\n  .then(movies => {\n    this.setState({ loading: false, movies: this.state.movies });\n  });  }, 1000)\n     }\n  render() {\n   \n    return (\n      <div className=\"App\">\n       <Listm isLoading={this.state.loading} movies={ this.state.movies}/> \n      </div>\n    );\n  }\n}\nconst Listm = WrappedComponent(List)\nlet movies = [{ \n  id:1,\n    title: 'Inception',\n    year: 2010,\n    rating: 5,\n    video: 'https://www.youtube.com/embed/8hP9D6kZseM0?autoplay=0&fs=0&iv_load_policy=3&showinfo=0&rel=0&cc_load_policy=0&start=0&end=0&origin=https://youtubeembedcode.com',\n  }, {\n    id:2,\n    title: 'Shawshank Redemption',\n    year: 1994,\n    rating: 4,\n  video: 'https://www.youtube.com/embed/8hP9D6kZseM0?autoplay=0&fs=0&iv_load_policy=3&showinfo=0&rel=0&cc_load_policy=0&start=0&end=0&origin=https://youtubeembedcode.com',\n\n  }, {\n    id:3,\n    title: 'Blade Runner',\n    year: 2017,\n    rating: 3,\n    video: 'https://www.youtube.com/embed/8hP9D6kZseM0?autoplay=0&fs=0&iv_load_policy=3&showinfo=0&rel=0&cc_load_policy=0&start=0&end=0&origin=https://youtubeembedcode.com',\n  }];\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}